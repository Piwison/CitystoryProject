# Generated by Django 5.2 on 2025-04-30 17:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('applicable_place_types', models.CharField(blank=True, help_text="Comma-separated list of place types this feature applies to (e.g., 'restaurant,cafe'). Leave blank if applicable to all.", max_length=255)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='core_featur_name_90b9dd_idx'), models.Index(fields=['applicable_place_types'], name='core_featur_applica_4cc5e7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('type', models.CharField(choices=[('restaurant', 'Restaurant'), ('cafe', 'Caf√©'), ('bar', 'Bar'), ('club', 'Club'), ('hotel', 'Hotel'), ('attraction', 'Tourist Attraction'), ('park', 'Park'), ('museum', 'Museum'), ('theater', 'Theater'), ('shopping', 'Shopping'), ('other', 'Other')], max_length=50)),
                ('price_range', models.CharField(choices=[('$', 'Budget'), ('$$', 'Moderate'), ('$$$', 'Expensive'), ('$$$$', 'Very Expensive')], max_length=4)),
                ('address', models.CharField(blank=True, default='', max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('website', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('draft', models.BooleanField(default=True)),
                ('average_rating', models.FloatField(default=0, help_text='Overall average rating across all dimensions')),
                ('average_food_rating', models.FloatField(default=0, help_text='Average food quality rating')),
                ('average_service_rating', models.FloatField(default=0, help_text='Average service rating')),
                ('average_value_rating', models.FloatField(default=0, help_text='Average value for money rating')),
                ('average_cleanliness_rating', models.FloatField(default=0, help_text='Average cleanliness rating')),
                ('features', models.ManyToManyField(blank=True, related_name='places', to='core.feature')),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='place_photos/')),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='core.place')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('text', models.TextField()),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('review_approved', 'Review Approved'), ('review_rejected', 'Review Rejected'), ('photo_approved', 'Photo Approved'), ('photo_rejected', 'Photo Rejected'), ('place_approved', 'Place Approved'), ('place_rejected', 'Place Rejected'), ('new_review', 'New Review'), ('new_photo', 'New Photo')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='core_notifi_user_id_1cc5b6_idx'), models.Index(fields=['notification_type'], name='core_notifi_notific_cbfe88_idx'), models.Index(fields=['is_read'], name='core_notifi_is_read_127eae_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['name'], name='core_place_name_113002_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['type'], name='core_place_type_de8a3c_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['price_range'], name='core_place_price_r_391547_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['created_at'], name='core_place_created_fdc5e6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('place', 'user')},
        ),
    ]
