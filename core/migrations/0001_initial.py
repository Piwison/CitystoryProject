# Generated by Django 5.0.2 on 2025-05-23 07:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('google_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('auth_type', models.CharField(choices=[('LOCAL', 'Local'), ('GOOGLE', 'Google')], default='LOCAL', max_length=10)),
                ('avatar', models.CharField(blank=True, help_text='Profile image URL', max_length=255, null=True)),
                ('bio', models.TextField(blank=True, help_text='Short user description', null=True)),
                ('location', models.CharField(blank=True, help_text="User's current location (city/country)", max_length=255, null=True)),
                ('guide_points', models.IntegerField(default=0, help_text='Points earned for contributions')),
                ('guide_level', models.IntegerField(default=1, help_text='Level based on points')),
                ('is_verified', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('DELETED', 'Deleted')], default='ACTIVE', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icon', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('max_level', models.PositiveIntegerField(default=1)),
                ('category', models.CharField(max_length=100)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='core_badge_name_5d4edd_idx'), models.Index(fields=['category'], name='core_badge_categor_9f2821_idx')],
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=128, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('feature_type', models.CharField(help_text='Category type: amenity, cuisine, etc.', max_length=50)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='core_featur_name_90b9dd_idx'), models.Index(fields=['feature_type'], name='core_featur_feature_8aec5c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_comment', models.TextField(blank=True, default='')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('district', models.CharField(blank=True, choices=[('xinyi', 'Xinyi'), ('datong', 'Datong'), ('daan', "Da'an"), ('shilin', 'Shilin'), ('wanhua', 'Wanhua'), ('songshan', 'Songshan'), ('zhongshan', 'Zhongshan'), ('beitou', 'Beitou'), ('nangang', 'Nangang'), ('wenshan', 'Wenshan'), ('neihu', 'Neihu'), ('zhongzheng', 'Zhongzheng'), ('other', 'Other')], help_text='District in Taipei', max_length=50, null=True)),
                ('latitude', models.FloatField(blank=True, help_text='Auto-generated from address', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Auto-generated from address', null=True)),
                ('place_type', models.CharField(choices=[('restaurant', 'Restaurant'), ('cafe', 'Cafe'), ('bar', 'Bar'), ('shop', 'Shop')], max_length=50)),
                ('avg_rating', models.FloatField(blank=True, null=True)),
                ('price_level', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('google_maps_link', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('contributor_id', models.CharField(blank=True, max_length=128, null=True)),
                ('draft', models.BooleanField(default=True)),
                ('website', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='places', to=settings.AUTH_USER_MODEL)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaceFeature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_features', to='core.feature')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_features', to='core.place')),
            ],
        ),
        migrations.AddField(
            model_name='place',
            name='features',
            field=models.ManyToManyField(blank=True, related_name='places', through='core.PlaceFeature', to='core.feature'),
        ),
        migrations.CreateModel(
            name='PlacePhoto',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_comment', models.TextField(blank=True, default='')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.CharField(help_text='URL to the photo', max_length=255)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='core.place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_comment', models.TextField(blank=True, default='')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_rating', models.FloatField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('food_quality', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('service', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('cleanliness', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_moderations', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HelpfulVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_helpful', models.BooleanField(default=True, help_text='Whether the user found the review helpful')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='core.review')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedPlace',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='core.place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_places', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.PositiveIntegerField(default=1)),
                ('earned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='core.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(default=1)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_level', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-level'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points', models.IntegerField(help_text='Number of points (positive for earned, negative for deducted)')),
                ('source_type', models.CharField(choices=[('place', 'Place Contribution'), ('review', 'Review Contribution'), ('photo', 'Photo Contribution'), ('helpful_vote', 'Helpful Vote'), ('badge', 'Badge Earned'), ('special', 'Special Award')], max_length=20)),
                ('source_id', models.PositiveIntegerField(blank=True, help_text='ID of the object that generated points', null=True)),
                ('description', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Points',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('review_approved', 'Review Approved'), ('review_rejected', 'Review Rejected'), ('photo_approved', 'Photo Approved'), ('photo_rejected', 'Photo Rejected'), ('place_approved', 'Place Approved'), ('place_rejected', 'Place Rejected'), ('new_review', 'New Review'), ('new_photo', 'New Photo'), ('review_helpful', 'Review Helpful'), ('badge_earned', 'Badge Earned'), ('level_up', 'Level Up')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='core_notifi_user_id_1cc5b6_idx'), models.Index(fields=['notification_type'], name='core_notifi_notific_cbfe88_idx'), models.Index(fields=['is_read'], name='core_notifi_is_read_127eae_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='placefeature',
            index=models.Index(fields=['place'], name='core_placef_place_i_9a7176_idx'),
        ),
        migrations.AddIndex(
            model_name='placefeature',
            index=models.Index(fields=['feature'], name='core_placef_feature_1e50fc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='placefeature',
            unique_together={('place', 'feature')},
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['name'], name='core_place_name_113002_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['created_by'], name='core_place_created_f55503_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['moderation_status'], name='core_place_moderat_3f07ec_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['place_type'], name='core_place_place_t_e7bd09_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['district'], name='core_place_distric_6da8a3_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['created_at'], name='core_place_created_fdc5e6_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['latitude', 'longitude'], name='core_place_latitud_c409b7_idx'),
        ),
        migrations.AddIndex(
            model_name='placephoto',
            index=models.Index(fields=['is_primary'], name='core_placep_is_prim_e1f91b_idx'),
        ),
        migrations.AddIndex(
            model_name='placephoto',
            index=models.Index(fields=['place'], name='core_placep_place_i_82a6b9_idx'),
        ),
        migrations.AddIndex(
            model_name='placephoto',
            index=models.Index(fields=['user'], name='core_placep_user_id_3b23bf_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['helpful_count'], name='core_review_helpful_0b7785_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='core_review_created_25a366_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('place', 'user')},
        ),
        migrations.AddIndex(
            model_name='helpfulvote',
            index=models.Index(fields=['review', 'user'], name='core_helpfu_review__225559_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='helpfulvote',
            unique_together={('review', 'user')},
        ),
        migrations.AddIndex(
            model_name='savedplace',
            index=models.Index(fields=['user'], name='core_savedp_user_id_fcf9ed_idx'),
        ),
        migrations.AddIndex(
            model_name='savedplace',
            index=models.Index(fields=['place'], name='core_savedp_place_i_991228_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='savedplace',
            unique_together={('user', 'place')},
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user'], name='core_userba_user_id_5c78f4_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['badge'], name='core_userba_badge_i_6862c5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['level'], name='core_userle_level_ea1acc_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['user'], name='core_userpo_user_id_b7a0ea_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['source_type'], name='core_userpo_source__347ab3_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['created_at'], name='core_userpo_created_e6482a_idx'),
        ),
    ]
