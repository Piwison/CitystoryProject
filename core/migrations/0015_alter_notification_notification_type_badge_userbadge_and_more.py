# Generated by Django 5.2 on 2025-05-14 10:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_create_saved_places'),
    ]

    operations = [
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('review_approved', 'Review Approved'), ('review_rejected', 'Review Rejected'), ('photo_approved', 'Photo Approved'), ('photo_rejected', 'Photo Rejected'), ('place_approved', 'Place Approved'), ('place_rejected', 'Place Rejected'), ('new_review', 'New Review'), ('new_photo', 'New Photo'), ('review_helpful', 'Review Helpful'), ('badge_earned', 'Badge Earned'), ('level_up', 'Level Up')], max_length=50),
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('place_contribution', 'Place Contribution'), ('review_contribution', 'Review Contribution'), ('photo_contribution', 'Photo Contribution'), ('engagement', 'Engagement'), ('longevity', 'Longevity'), ('special', 'Special')], max_length=50)),
                ('level', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], max_length=20)),
                ('icon', models.URLField(blank=True, help_text='URL to the badge icon image', null=True)),
                ('points', models.PositiveIntegerField(default=0, help_text='Points awarded for earning this badge')),
                ('requirement_description', models.TextField(help_text='Human-readable description of how to earn this badge')),
                ('requirement_code', models.CharField(help_text='Code used to programmatically check badge requirements', max_length=100, unique=True)),
            ],
            options={
                'ordering': ['level', 'name'],
                'indexes': [models.Index(fields=['type'], name='core_badge_type_3fefc8_idx'), models.Index(fields=['level'], name='core_badge_level_c98de2_idx'), models.Index(fields=['requirement_code'], name='core_badge_require_d3ff37_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awarded_to', to='core.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-awarded_at'],
                'indexes': [models.Index(fields=['user'], name='core_userba_user_id_5c78f4_idx'), models.Index(fields=['badge'], name='core_userba_badge_i_6862c5_idx'), models.Index(fields=['awarded_at'], name='core_userba_awarded_6b23b2_idx')],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(default=1)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_level', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-level'],
                'indexes': [models.Index(fields=['level'], name='core_userle_level_ea1acc_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points', models.IntegerField(help_text='Number of points (positive for earned, negative for deducted)')),
                ('source_type', models.CharField(choices=[('place', 'Place Contribution'), ('review', 'Review Contribution'), ('photo', 'Photo Contribution'), ('helpful_vote', 'Helpful Vote'), ('badge', 'Badge Earned'), ('special', 'Special Award')], max_length=20)),
                ('source_id', models.PositiveIntegerField(blank=True, help_text='ID of the object that generated points', null=True)),
                ('description', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Points',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='core_userpo_user_id_b7a0ea_idx'), models.Index(fields=['source_type'], name='core_userpo_source__347ab3_idx'), models.Index(fields=['created_at'], name='core_userpo_created_e6482a_idx')],
            },
        ),
    ]
